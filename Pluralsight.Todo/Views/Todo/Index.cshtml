@model Pluralsight.Todo.Models.IndexPageModel
@using Pluralsight.Todo.Models;
@using System.Text;

@using System.Web.Mvc.Html;

@using Pluralsight.Todo.Helpers

@{

    ViewBag.Title = "Index";
}

<h2>Index</h2>


<p>
    @Html.ActionLink("Create New", "Create")
</p>

<p>
    Show: &nbsp;

    @{


        foreach (var option in (EnumCompletionSelectionOption[])Enum.GetValues(typeof(EnumCompletionSelectionOption)))
        {

            @Html.RadioButtonFor(model => Model.CompletionSelectionOption, option)<span>&nbsp;</span>@option <span>&nbsp; &nbsp; </span>

        }


    }

</p>
@{

    try
    {
        <p>@Html.CheckBoxFor(model => model.IncludeOnlyVacationEntries) &nbsp; Show only "Vacation" entries</p>

    }
    catch (Exception e)
    {
        Model.IncludeOnlyVacationEntries = false;
    }
}


<table class="table">
    <tr>

        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "Group")
        </th>

        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "Content")
        </th>
        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "Due")
        </th>
        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "Completed")
        </th>
        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "CompletedDate")
        </th>
        <th>
            @HtmlHelpersCustom.DisplayNameFor_SSN(Model.todoModel, "Timestamp")
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.todoModel)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Group)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Content)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Due)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Completed)
        </td>
        <td>
            @Html.DisplayForLocalTime(item.CompletedDate)
        </td>
        <td>
            @Html.DisplayForLocalTime(item.Timestamp)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.Id, group = item.Group }) |
            @Html.ActionLink("Details", "Details", new { id = item.Id, group = item.Group }) |
            @Html.ActionLink("Delete", "ConfirmDelete", new { id = item.Id, group = item.Group })
        </td>
    </tr>
    }

</table>

@{
    StringBuilder sb = new StringBuilder();
    sb.AppendLine("const validEntries = [];");
    foreach (var option in (EnumCompletionSelectionOption[])Enum.GetValues(typeof(EnumCompletionSelectionOption)))
    {
        sb.AppendLine(string.Format("validEntries.push('{0}');", @option));
    }
}


@section Scripts{

    <script>
@Html.Raw(sb.ToString())
    </script>
    <script src="~/scripts_custom/index1.js"></script>
}